


// https://github.com/trufflesuite/truffle/issues/498
// https://rinkeby.etherscan.io/address/0x4a174BaF2E41f5B8A68fc79139C054a541402c79
//  geth --rinkeby --rpc --rpcapi db,eth,net,web3,personal --unlock 0  --light  console  --cache=1024 --maxpeers 128


// /home/koras/contracts/publicRabbit/priv
//const Priv_contract = artifacts.require("/home/koras/contracts/publicRabbit/priv/Migrations.sol");
const MetaCoin = artifacts.require("./BunnyGame.sol");

var GasCost = 4700000;
var gasPrice_value = 10000000000; 
var bigPrice    = 100000000000000;
                  
var priceBunny = 1;
var SireBunnyID = 6;
var MotherBunnyID = 5;
var newBunnyID = 15;
var priceChildren = 1;

let giffes = '0xeddb036a52a6d2c375e501be7c8c8cd45d07e796';
let private_accounts =  ["7df9a875a174b3bc565e6424a0050ebc1b2d1d82","f41c74c9ae680c1aa78f42e5647a62f353b7bdde"];
// ["0x15c7c1d8754e7f47d49126e1ab8964f23c1bf6de", "0x32b10f16d90ce2e3820fef712beb1430e177a8dd", "0x61a8d8cc086cb54847d3bdf52b465ce8b1404a7b", 
//"0x7ae59441fdb4cfb77ce0918379d609239e123912", "0x2efc9906ff417c66c651b020aab988c1a5bc0e4b"]

// eth.sendTransaction({from:'0x15c7c1d8754e7f47d49126e1ab8964f23c1bf6de', to:'0x4Ece223a70F46056419957EbDa1e31d5D79fF03a', value: web3.toWei(12.05, "ether"), gas:21000});
contract('Основной публичный контракт: ', ( accounts,revert) => {

  var meta;
  it("Загружаем контракт "+accounts[0], function() {
    return MetaCoin.deployed().then(function(instance) {
              meta = instance;
        //      instance.createGennezise({from: accounts[0], gas:3000000,gasPrice:5000000000});
        //      instance.createGennezise({from: accounts[0], gas:3000000,gasPrice:5000000000});
       //       instance.createGennezise({from: accounts[0], gas:3000000,gasPrice:5000000000});
       // //      instance.createGennezise({from: accounts[0], gas:3000000,gasPrice:5000000000});
  //    return  instance.createGennezise({from: accounts[0], gas:GasCost,gasPrice:gasPrice_value});

  //  }).then( (result ) => {
    
        return meta.totalSupply.call();

    }).then( (result ) => {
      assert.equal(result , 0, ' Загружаем контракт : ' + result); 
    });

  });

 
  
  it("Создаём кролика"  , function() {
    // Дарим второго пролика 
    // Дарим третьего пролика
        meta.createGennezise({from: accounts[0], gas:  GasCost ,gasPrice:gasPrice_value});
        meta.createGennezise({from: accounts[0], gas:  GasCost ,gasPrice:gasPrice_value});
        meta.createGennezise({from: accounts[0], gas:  GasCost ,gasPrice:gasPrice_value});
        meta.createGennezise({from: accounts[0], gas:  GasCost ,gasPrice:gasPrice_value});
        meta.createGennezise({from: accounts[0], gas:  GasCost ,gasPrice:gasPrice_value});
        meta.createGennezise({from: accounts[0], gas:  GasCost ,gasPrice:gasPrice_value});
        meta.createGennezise({from: accounts[0], gas:  GasCost ,gasPrice:gasPrice_value});
        meta.createGennezise({from: accounts[0], gas:  GasCost ,gasPrice:gasPrice_value});
        meta.createGennezise({from: accounts[0], gas:  GasCost ,gasPrice:gasPrice_value});
        meta.createGennezise({from: accounts[0], gas:  GasCost ,gasPrice:gasPrice_value});
        meta.createGennezise({from: accounts[0], gas:  GasCost ,gasPrice:gasPrice_value});
        meta.createGennezise({from: accounts[0], gas:  GasCost ,gasPrice:gasPrice_value});

        meta.createGennezise({from: accounts[0], gas:  GasCost ,gasPrice:gasPrice_value}).then(function(instance) {
      return meta.totalSupply.call();
    }).then( () => {
       assert.isTrue(true); 
    })
  }); 

  it("Добавляем второго кролика в контракт " , function() {
    // Дарим второго пролика 
    // Дарим третьего пролика
         meta.createGennezise({from: accounts[0], gas:  GasCost ,gasPrice:gasPrice_value}).then(function(instance) {
      return meta.totalSupply.call();
    }).then( (result ) => {
       assert.equal(result , 14 , ' Кролик не соответствует : ' + result +' address '+meta.address); 
    })
  }); 

  it("Дарим 2,3 кролика", function() {
    meta.giff(2, giffes , {from: accounts[0], gas:GasCost,gasPrice: gasPrice_value} );

     meta.giff(3, giffes , {from: accounts[0], gas:GasCost,gasPrice: gasPrice_value}).then(function(instance) {

    return meta.ownerOf.call(3);
    }).then( (result ) => {
      return  assert.equal(result , giffes, 'Подарок не соответстует тому которому подарили : ' + result +' != ' +giffes); 
    })
}); 



it("Устанавливаем стоимость для второго кролика "+ priceBunny, function() { 

  return meta.setMarket(2, priceBunny , {from: accounts[0], gas:GasCost,gasPrice:  gasPrice_value}).then(function(result) {

    return meta.currentPrice(2);
  }).then( (result ) => {
    return  assert.equal(result ,100000000000000, ' Кролик не соответствует : ' + result ); 
  })
}); 

 

   var cost = 100000000000000;



// 0x5aeda56215b167893e80b4fe645ba6d5bab767de
it("Покупаем кролика1 #2", function() {
  // Дарим третьего пролика
  return meta.buyBunny(2,  {from: accounts[0], gas:GasCost,gasPrice:  gasPrice_value, value:cost}).then(function(instance) {
  }).then( (result ) => {
    return meta.ownerOf.call(2);
  }).then( (result ) => {
     assert.equal(result , accounts[0], ' Кролик не соответствует : ' + result ); 
  })
}); 


// 0x5aeda56215b167893e80b4fe645ba6d5bab767de
  it("Устанавливаем стоимость для SIRE "+SireBunnyID +"в размере "+(priceChildren*bigPrice), function() {
      return meta.setRabbitSirePrice(SireBunnyID, priceChildren, {from: accounts[0], gas:GasCost,gasPrice:  gasPrice_value}).then(function(instance) {
        assert.isTrue(true); 
      })
    }); 



    // 0x5aeda56215b167893e80b4fe645ba6d5bab767de
    it("Воспроизводим своего ребёнка смешивая гены с "+MotherBunnyID + ' и ' + SireBunnyID +' кроликами', function() {
            // сколько денег надо для нового кролика?
            // Для нового кролика надо + 25%   
            newprice = priceChildren*bigPrice+(priceChildren*bigPrice/4);
            return meta.createChildren(MotherBunnyID, SireBunnyID, {from: accounts[0], gas:GasCost,gasPrice:  gasPrice_value, value:newprice}).then(function() {
              return meta.ownerOf.call(newBunnyID);
            }).then( (result ) => {
              return  assert.equal(result ,accounts[0], 'Ошибка проверки соответствия нового кролика и аккаунта : ' + result ); 
        })
    }); 


    // 0x5aeda56215b167893e80b4fe645ba6d5bab767de
    it("Выставляем на продажу нового кролика и получаем стоимость сверяя её с " + (priceChildren*bigPrice), function() {
            return meta.setMarket(newBunnyID, priceChildren , {from: accounts[0], gas:GasCost,gasPrice:  gasPrice_value}).then(function() {
              return meta.currentPrice.call(newBunnyID);
            }).then( (result ) => {
              return  assert.equal(result ,priceChildren*bigPrice , 'Ошибка проверки соответствия цены на нового кролика: ' + result ); 
        })
    }); 


    // 0x5aeda56215b167893e80b4fe645ba6d5bab767de
    it("Снимаем с продажи нашего кролика "  , function() {
        return meta.stopMarket(newBunnyID, {from: accounts[0], gas:GasCost,gasPrice:  gasPrice_value}).then(function() {
          return meta.currentPrice.call(newBunnyID);
        }).then( (result ) => {
          return  assert.equal(result , 0 , 'Ошибка проверки соответствия цены на нового кролика: ' + result ); 
      })
    }); 


    it("Подарим нового кролика("+newBunnyID+") пользователю: " + giffes, function() {
      return meta.giff(newBunnyID, giffes , {from: accounts[0], gas:GasCost,gasPrice: gasPrice_value}).then(function(instance) {
      return meta.ownerOf.call(newBunnyID);
      }).then( (result ) => {
        return  assert.equal(result , giffes, 'Подарок не соответстует тому которому подарили : ' + result +' != ' +giffes); 
      })
  }); 

});